#pragma once

#include <dwarf.h>
#include <libdwarf.h>

#include <ostream>

namespace cppdwarf {

enum class access {
    public_ = DW_ACCESS_public,
    protected_ = DW_ACCESS_protected,
    private_ = DW_ACCESS_private,
};

inline std::ostream &operator<<(std::ostream &os, access a)
{
    const char *name = nullptr;
    int res = dwarf_get_ACCESS_name(static_cast<Dwarf_Half>(a), &name);
    if (res != DW_DLV_OK) {
        os << "<bogus access>";
    }
    else {
        os << name;
    }
    return os;
}

enum class form {
    addr = DW_FORM_addr,
    block2 = DW_FORM_block2,
    block4 = DW_FORM_block4,
    data2 = DW_FORM_data2,
    data4 = DW_FORM_data4,
    data8 = DW_FORM_data8,
    string = DW_FORM_string,
    block = DW_FORM_block,
    block1 = DW_FORM_block1,
    data1 = DW_FORM_data1,
    flag = DW_FORM_flag,
    sdata = DW_FORM_sdata,
    strp = DW_FORM_strp,
    udata = DW_FORM_udata,
    ref_addr = DW_FORM_ref_addr,
    ref1 = DW_FORM_ref1,
    ref2 = DW_FORM_ref2,
    ref4 = DW_FORM_ref4,
    ref8 = DW_FORM_ref8,
    ref_udata = DW_FORM_ref_udata,
    indirect = DW_FORM_indirect,
    sec_offset = DW_FORM_sec_offset,
    exprloc = DW_FORM_exprloc,
    flag_present = DW_FORM_flag_present,
    strx = DW_FORM_strx,
    addrx = DW_FORM_addrx,
    ref_sup4 = DW_FORM_ref_sup4,
    strp_sup = DW_FORM_strp_sup,
    data16 = DW_FORM_data16,
    line_strp = DW_FORM_line_strp,
    ref_sig8 = DW_FORM_ref_sig8,
    implicit_const = DW_FORM_implicit_const,
    loclistx = DW_FORM_loclistx,
    rnglistx = DW_FORM_rnglistx,
    ref_sup8 = DW_FORM_ref_sup8,
    strx1 = DW_FORM_strx1,
    strx2 = DW_FORM_strx2,
    strx3 = DW_FORM_strx3,
    strx4 = DW_FORM_strx4,
    addrx1 = DW_FORM_addrx1,
    addrx2 = DW_FORM_addrx2,
    addrx3 = DW_FORM_addrx3,
    addrx4 = DW_FORM_addrx4,
    GNU_addr_index = DW_FORM_GNU_addr_index,
    GNU_str_index = DW_FORM_GNU_str_index,
    GNU_ref_alt = DW_FORM_GNU_ref_alt,
    GNU_strp_alt = DW_FORM_GNU_strp_alt,
    LLVM_addrx_offset = DW_FORM_LLVM_addrx_offset,
};

inline std::ostream &operator<<(std::ostream &os, form f)
{
    const char *name = nullptr;
    int res = dwarf_get_FORM_name(static_cast<Dwarf_Half>(f), &name);
    if (res != DW_DLV_OK) {
        os << "<bogus form>";
    }
    else {
        os << name;
    }
    return os;
}

enum class tag {
    array_type = DW_TAG_array_type,
    class_type = DW_TAG_class_type,
    entry_point = DW_TAG_entry_point,
    enumeration_type = DW_TAG_enumeration_type,
    formal_parameter = DW_TAG_formal_parameter,
    imported_declaration = DW_TAG_imported_declaration,
    label = DW_TAG_label,
    lexical_block = DW_TAG_lexical_block,
    member = DW_TAG_member,
    pointer_type = DW_TAG_pointer_type,
    reference_type = DW_TAG_reference_type,
    compile_unit = DW_TAG_compile_unit,
    string_type = DW_TAG_string_type,
    structure_type = DW_TAG_structure_type,
    subroutine_type = DW_TAG_subroutine_type,
    typedef_ = DW_TAG_typedef,
    union_type = DW_TAG_union_type,
    unspecified_parameters = DW_TAG_unspecified_parameters,
    variant = DW_TAG_variant,
    common_block = DW_TAG_common_block,
    common_inclusion = DW_TAG_common_inclusion,
    inheritance = DW_TAG_inheritance,
    inlined_subroutine = DW_TAG_inlined_subroutine,
    module = DW_TAG_module,
    ptr_to_member_type = DW_TAG_ptr_to_member_type,
    set_type = DW_TAG_set_type,
    subrange_type = DW_TAG_subrange_type,
    with_stmt = DW_TAG_with_stmt,
    access_declaration = DW_TAG_access_declaration,
    base_type = DW_TAG_base_type,
    catch_block = DW_TAG_catch_block,
    const_type = DW_TAG_const_type,
    constant = DW_TAG_constant,
    enumerator = DW_TAG_enumerator,
    file_type = DW_TAG_file_type,
    friend_ = DW_TAG_friend,
    namelist = DW_TAG_namelist,
    namelist_item = DW_TAG_namelist_item,
    namelist_items = DW_TAG_namelist_items,
    packed_type = DW_TAG_packed_type,
    subprogram = DW_TAG_subprogram,
    template_type_parameter = DW_TAG_template_type_parameter,
    template_type_param = DW_TAG_template_type_param,
    template_value_parameter = DW_TAG_template_value_parameter,
    template_value_param = DW_TAG_template_value_param,
    thrown_type = DW_TAG_thrown_type,
    try_block = DW_TAG_try_block,
    variant_part = DW_TAG_variant_part,
    variable = DW_TAG_variable,
    volatile_type = DW_TAG_volatile_type,
    dwarf_procedure = DW_TAG_dwarf_procedure,
    restrict_type = DW_TAG_restrict_type,
    interface_type = DW_TAG_interface_type,
    namespace_ = DW_TAG_namespace,
    imported_module = DW_TAG_imported_module,
    unspecified_type = DW_TAG_unspecified_type,
    partial_unit = DW_TAG_partial_unit,
    imported_unit = DW_TAG_imported_unit,
    mutable_type = DW_TAG_mutable_type,
    condition = DW_TAG_condition,
    shared_type = DW_TAG_shared_type,
    type_unit = DW_TAG_type_unit,
    rvalue_reference_type = DW_TAG_rvalue_reference_type,
    template_alias = DW_TAG_template_alias,
    coarray_type = DW_TAG_coarray_type,
    generic_subrange = DW_TAG_generic_subrange,
    dynamic_type = DW_TAG_dynamic_type,
    atomic_type = DW_TAG_atomic_type,
    call_site = DW_TAG_call_site,
    call_site_parameter = DW_TAG_call_site_parameter,
    skeleton_unit = DW_TAG_skeleton_unit,
    immutable_type = DW_TAG_immutable_type,
    TI_far_type = DW_TAG_TI_far_type,
    lo_user = DW_TAG_lo_user,
    MIPS_loop = DW_TAG_MIPS_loop,
    TI_near_type = DW_TAG_TI_near_type,
    TI_assign_register = DW_TAG_TI_assign_register,
    TI_ioport_type = DW_TAG_TI_ioport_type,
    TI_restrict_type = DW_TAG_TI_restrict_type,
    TI_onchip_type = DW_TAG_TI_onchip_type,
    HP_array_descriptor = DW_TAG_HP_array_descriptor,
    format_label = DW_TAG_format_label,
    function_template = DW_TAG_function_template,
    class_template = DW_TAG_class_template,
    GNU_BINCL = DW_TAG_GNU_BINCL,
    GNU_EINCL = DW_TAG_GNU_EINCL,
    GNU_template_template_parameter = DW_TAG_GNU_template_template_parameter,
    GNU_template_template_param = DW_TAG_GNU_template_template_param,
    GNU_template_parameter_pack = DW_TAG_GNU_template_parameter_pack,
    GNU_formal_parameter_pack = DW_TAG_GNU_formal_parameter_pack,
    GNU_call_site = DW_TAG_GNU_call_site,
    GNU_call_site_parameter = DW_TAG_GNU_call_site_parameter,
    SUN_function_template = DW_TAG_SUN_function_template,
    SUN_class_template = DW_TAG_SUN_class_template,
    SUN_struct_template = DW_TAG_SUN_struct_template,
    SUN_union_template = DW_TAG_SUN_union_template,
    SUN_indirect_inheritance = DW_TAG_SUN_indirect_inheritance,
    SUN_codeflags = DW_TAG_SUN_codeflags,
    SUN_memop_info = DW_TAG_SUN_memop_info,
    SUN_omp_child_func = DW_TAG_SUN_omp_child_func,
    SUN_rtti_descriptor = DW_TAG_SUN_rtti_descriptor,
    SUN_dtor_info = DW_TAG_SUN_dtor_info,
    SUN_dtor = DW_TAG_SUN_dtor,
    SUN_f90_interface = DW_TAG_SUN_f90_interface,
    SUN_fortran_vax_structure = DW_TAG_SUN_fortran_vax_structure,
    SUN_hi = DW_TAG_SUN_hi,
    ALTIUM_circ_type = DW_TAG_ALTIUM_circ_type,
    ALTIUM_mwa_circ_type = DW_TAG_ALTIUM_mwa_circ_type,
    ALTIUM_rev_carry_type = DW_TAG_ALTIUM_rev_carry_type,
    ALTIUM_rom = DW_TAG_ALTIUM_rom,
    LLVM_annotation = DW_TAG_LLVM_annotation,
    ghs_namespace = DW_TAG_ghs_namespace,
    ghs_using_namespace = DW_TAG_ghs_using_namespace,
    ghs_using_declaration = DW_TAG_ghs_using_declaration,
    ghs_template_templ_param = DW_TAG_ghs_template_templ_param,
    upc_shared_type = DW_TAG_upc_shared_type,
    upc_strict_type = DW_TAG_upc_strict_type,
    upc_relaxed_type = DW_TAG_upc_relaxed_type,
    PGI_kanji_type = DW_TAG_PGI_kanji_type,
    PGI_interface_block = DW_TAG_PGI_interface_block,
    BORLAND_property = DW_TAG_BORLAND_property,
    BORLAND_Delphi_string = DW_TAG_BORLAND_Delphi_string,
    BORLAND_Delphi_dynamic_array = DW_TAG_BORLAND_Delphi_dynamic_array,
    BORLAND_Delphi_set = DW_TAG_BORLAND_Delphi_set,
    BORLAND_Delphi_variant = DW_TAG_BORLAND_Delphi_variant,
    hi_user = DW_TAG_hi_user,
};

inline std::ostream &operator<<(std::ostream &os, tag tag)
{
    const char *name = nullptr;
    int res = dwarf_get_TAG_name(static_cast<Dwarf_Half>(tag), &name);
    if (res != DW_DLV_OK) {
        os << "<bogus tag>";
    }
    else {
        os << name;
    }
    return os;
}

enum class virtuality {
    none = DW_VIRTUALITY_none,
    virtual_ = DW_VIRTUALITY_virtual,
    pure_virtual = DW_VIRTUALITY_pure_virtual,
};

inline std::ostream &operator<<(std::ostream &os, virtuality v)
{
    const char *name = nullptr;
    int res = dwarf_get_VIRTUALITY_name(static_cast<Dwarf_Half>(v), &name);
    if (res != DW_DLV_OK) {
        os << "<bogus virtuality>";
    }
    else {
        os << name;
    }
    return os;
}

enum class attribute_t {
    sibling = DW_AT_sibling,
    location = DW_AT_location,
    name = DW_AT_name,
    ordering = DW_AT_ordering,
    subscr_data = DW_AT_subscr_data,
    byte_size = DW_AT_byte_size,
    bit_offset = DW_AT_bit_offset,
    bit_size = DW_AT_bit_size,
    element_list = DW_AT_element_list,
    stmt_list = DW_AT_stmt_list,
    low_pc = DW_AT_low_pc,
    high_pc = DW_AT_high_pc,
    language = DW_AT_language,
    member = DW_AT_member,
    discr = DW_AT_discr,
    discr_value = DW_AT_discr_value,
    visibility = DW_AT_visibility,
    import = DW_AT_import,
    string_length = DW_AT_string_length,
    common_reference = DW_AT_common_reference,
    comp_dir = DW_AT_comp_dir,
    const_value = DW_AT_const_value,
    containing_type = DW_AT_containing_type,
    default_value = DW_AT_default_value,
    inline_ = DW_AT_inline,
    is_optional = DW_AT_is_optional,
    lower_bound = DW_AT_lower_bound,
    producer = DW_AT_producer,
    prototyped = DW_AT_prototyped,
    return_addr = DW_AT_return_addr,
    start_scope = DW_AT_start_scope,
    bit_stride = DW_AT_bit_stride,
    stride_size = DW_AT_stride_size,
    upper_bound = DW_AT_upper_bound,
    abstract_origin = DW_AT_abstract_origin,
    accessibility = DW_AT_accessibility,
    address_class = DW_AT_address_class,
    artificial = DW_AT_artificial,
    base_types = DW_AT_base_types,
    calling_convention = DW_AT_calling_convention,
    count = DW_AT_count,
    data_member_location = DW_AT_data_member_location,
    decl_column = DW_AT_decl_column,
    decl_file = DW_AT_decl_file,
    decl_line = DW_AT_decl_line,
    declaration = DW_AT_declaration,
    discr_list = DW_AT_discr_list,
    encoding = DW_AT_encoding,
    external = DW_AT_external,
    frame_base = DW_AT_frame_base,
    friend_ = DW_AT_friend,
    identifier_case = DW_AT_identifier_case,
    macro_info = DW_AT_macro_info,
    namelist_item = DW_AT_namelist_item,
    priority = DW_AT_priority,
    segment = DW_AT_segment,
    specification = DW_AT_specification,
    static_link = DW_AT_static_link,
    type = DW_AT_type,
    use_location = DW_AT_use_location,
    variable_parameter = DW_AT_variable_parameter,
    virtuality = DW_AT_virtuality,
    vtable_elem_location = DW_AT_vtable_elem_location,
    allocated = DW_AT_allocated,
    associated = DW_AT_associated,
    data_location = DW_AT_data_location,
    byte_stride = DW_AT_byte_stride,
    stride = DW_AT_stride,
    entry_pc = DW_AT_entry_pc,
    use_UTF8 = DW_AT_use_UTF8,
    extension = DW_AT_extension,
    ranges = DW_AT_ranges,
    trampoline = DW_AT_trampoline,
    call_column = DW_AT_call_column,
    call_file = DW_AT_call_file,
    call_line = DW_AT_call_line,
    description = DW_AT_description,
    binary_scale = DW_AT_binary_scale,
    decimal_scale = DW_AT_decimal_scale,
    small = DW_AT_small,
    decimal_sign = DW_AT_decimal_sign,
    digit_count = DW_AT_digit_count,
    picture_string = DW_AT_picture_string,
    mutable_ = DW_AT_mutable,
    threads_scaled = DW_AT_threads_scaled,
    explicit_ = DW_AT_explicit,
    object_pointer = DW_AT_object_pointer,
    endianity = DW_AT_endianity,
    elemental = DW_AT_elemental,
    pure = DW_AT_pure,
    recursive = DW_AT_recursive,
    signature = DW_AT_signature,
    main_subprogram = DW_AT_main_subprogram,
    data_bit_offset = DW_AT_data_bit_offset,
    const_expr = DW_AT_const_expr,
    enum_class = DW_AT_enum_class,
    linkage_name = DW_AT_linkage_name,
    string_length_bit_size = DW_AT_string_length_bit_size,
    string_length_byte_size = DW_AT_string_length_byte_size,
    rank = DW_AT_rank,
    str_offsets_base = DW_AT_str_offsets_base,
    addr_base = DW_AT_addr_base,
    rnglists_base = DW_AT_rnglists_base,
    dwo_id = DW_AT_dwo_id,
    dwo_name = DW_AT_dwo_name,
    reference = DW_AT_reference,
    rvalue_reference = DW_AT_rvalue_reference,
    macros = DW_AT_macros,
    call_all_calls = DW_AT_call_all_calls,
    call_all_source_calls = DW_AT_call_all_source_calls,
    call_all_tail_calls = DW_AT_call_all_tail_calls,
    call_return_pc = DW_AT_call_return_pc,
    call_value = DW_AT_call_value,
    call_origin = DW_AT_call_origin,
    call_parameter = DW_AT_call_parameter,
    call_pc = DW_AT_call_pc,
    call_tail_call = DW_AT_call_tail_call,
    call_target = DW_AT_call_target,
    call_target_clobbered = DW_AT_call_target_clobbered,
    call_data_location = DW_AT_call_data_location,
    call_data_value = DW_AT_call_data_value,
    noreturn = DW_AT_noreturn,
    alignment = DW_AT_alignment,
    export_symbols = DW_AT_export_symbols,
    deleted = DW_AT_deleted,
    defaulted = DW_AT_defaulted,
    loclists_base = DW_AT_loclists_base,
    ghs_namespace_alias = DW_AT_ghs_namespace_alias,
    ghs_using_namespace = DW_AT_ghs_using_namespace,
    ghs_using_declaration = DW_AT_ghs_using_declaration,
    HP_block_index = DW_AT_HP_block_index,
    lo_user = DW_AT_lo_user,
    TI_veneer = DW_AT_TI_veneer,
    MIPS_fde = DW_AT_MIPS_fde,
    TI_symbol_name = DW_AT_TI_symbol_name,
    MIPS_loop_begin = DW_AT_MIPS_loop_begin,
    MIPS_tail_loop_begin = DW_AT_MIPS_tail_loop_begin,
    MIPS_epilog_begin = DW_AT_MIPS_epilog_begin,
    MIPS_loop_unroll_factor = DW_AT_MIPS_loop_unroll_factor,
    MIPS_software_pipeline_depth = DW_AT_MIPS_software_pipeline_depth,
    MIPS_linkage_name = DW_AT_MIPS_linkage_name,
    MIPS_stride = DW_AT_MIPS_stride,
    MIPS_abstract_name = DW_AT_MIPS_abstract_name,
    MIPS_clone_origin = DW_AT_MIPS_clone_origin,
    MIPS_has_inlines = DW_AT_MIPS_has_inlines,
    TI_version = DW_AT_TI_version,
    MIPS_stride_byte = DW_AT_MIPS_stride_byte,
    TI_asm = DW_AT_TI_asm,
    MIPS_stride_elem = DW_AT_MIPS_stride_elem,
    MIPS_ptr_dopetype = DW_AT_MIPS_ptr_dopetype,
    TI_skeletal = DW_AT_TI_skeletal,
    MIPS_allocatable_dopetype = DW_AT_MIPS_allocatable_dopetype,
    MIPS_assumed_shape_dopetype = DW_AT_MIPS_assumed_shape_dopetype,
    MIPS_assumed_size = DW_AT_MIPS_assumed_size,
    TI_interrupt = DW_AT_TI_interrupt,
    HP_unmodifiable = DW_AT_HP_unmodifiable,
    HP_prologue = DW_AT_HP_prologue,
    HP_epilogue = DW_AT_HP_epilogue,
    HP_actuals_stmt_list = DW_AT_HP_actuals_stmt_list,
    HP_proc_per_section = DW_AT_HP_proc_per_section,
    HP_raw_data_ptr = DW_AT_HP_raw_data_ptr,
    HP_pass_by_reference = DW_AT_HP_pass_by_reference,
    HP_opt_level = DW_AT_HP_opt_level,
    HP_prof_version_id = DW_AT_HP_prof_version_id,
    HP_opt_flags = DW_AT_HP_opt_flags,
    HP_cold_region_low_pc = DW_AT_HP_cold_region_low_pc,
    HP_cold_region_high_pc = DW_AT_HP_cold_region_high_pc,
    HP_all_variables_modifiable = DW_AT_HP_all_variables_modifiable,
    HP_linkage_name = DW_AT_HP_linkage_name,
    HP_prof_flags = DW_AT_HP_prof_flags,
    HP_unit_name = DW_AT_HP_unit_name,
    HP_unit_size = DW_AT_HP_unit_size,
    HP_widened_byte_size = DW_AT_HP_widened_byte_size,
    HP_definition_points = DW_AT_HP_definition_points,
    HP_default_location = DW_AT_HP_default_location,
    HP_is_result_param = DW_AT_HP_is_result_param,
    CPQ_discontig_ranges = DW_AT_CPQ_discontig_ranges,
    CPQ_semantic_events = DW_AT_CPQ_semantic_events,
    CPQ_split_lifetimes_var = DW_AT_CPQ_split_lifetimes_var,
    CPQ_split_lifetimes_rtn = DW_AT_CPQ_split_lifetimes_rtn,
    CPQ_prologue_length = DW_AT_CPQ_prologue_length,
    ghs_mangled = DW_AT_ghs_mangled,
    ghs_rsm = DW_AT_ghs_rsm,
    ghs_frsm = DW_AT_ghs_frsm,
    ghs_frames = DW_AT_ghs_frames,
    ghs_rso = DW_AT_ghs_rso,
    ghs_subcpu = DW_AT_ghs_subcpu,
    ghs_lbrace_line = DW_AT_ghs_lbrace_line,
    INTEL_other_endian = DW_AT_INTEL_other_endian,
    sf_names = DW_AT_sf_names,
    src_info = DW_AT_src_info,
    mac_info = DW_AT_mac_info,
    src_coords = DW_AT_src_coords,
    body_begin = DW_AT_body_begin,
    body_end = DW_AT_body_end,
    GNU_vector = DW_AT_GNU_vector,
    GNU_guarded_by = DW_AT_GNU_guarded_by,
    GNU_pt_guarded_by = DW_AT_GNU_pt_guarded_by,
    GNU_guarded = DW_AT_GNU_guarded,
    GNU_pt_guarded = DW_AT_GNU_pt_guarded,
    GNU_locks_excluded = DW_AT_GNU_locks_excluded,
    GNU_exclusive_locks_required = DW_AT_GNU_exclusive_locks_required,
    GNU_shared_locks_required = DW_AT_GNU_shared_locks_required,
    GNU_odr_signature = DW_AT_GNU_odr_signature,
    GNU_template_name = DW_AT_GNU_template_name,
    GNU_call_site_value = DW_AT_GNU_call_site_value,
    GNU_call_site_data_value = DW_AT_GNU_call_site_data_value,
    GNU_call_site_target = DW_AT_GNU_call_site_target,
    GNU_call_site_target_clobbered = DW_AT_GNU_call_site_target_clobbered,
    GNU_tail_call = DW_AT_GNU_tail_call,
    GNU_all_tail_call_sites = DW_AT_GNU_all_tail_call_sites,
    GNU_all_call_sites = DW_AT_GNU_all_call_sites,
    GNU_all_source_call_sites = DW_AT_GNU_all_source_call_sites,
    GNU_macros = DW_AT_GNU_macros,
    GNU_deleted = DW_AT_GNU_deleted,
    GNU_dwo_name = DW_AT_GNU_dwo_name,
    GNU_dwo_id = DW_AT_GNU_dwo_id,
    GNU_ranges_base = DW_AT_GNU_ranges_base,
    GNU_addr_base = DW_AT_GNU_addr_base,
    GNU_pubnames = DW_AT_GNU_pubnames,
    GNU_pubtypes = DW_AT_GNU_pubtypes,
    GNU_discriminator = DW_AT_GNU_discriminator,
    GNU_locviews = DW_AT_GNU_locviews,
    GNU_entry_view = DW_AT_GNU_entry_view,
    SUN_template = DW_AT_SUN_template,
    VMS_rtnbeg_pd_address = DW_AT_VMS_rtnbeg_pd_address,
    SUN_alignment = DW_AT_SUN_alignment,
    SUN_vtable = DW_AT_SUN_vtable,
    SUN_count_guarantee = DW_AT_SUN_count_guarantee,
    SUN_command_line = DW_AT_SUN_command_line,
    SUN_vbase = DW_AT_SUN_vbase,
    SUN_compile_options = DW_AT_SUN_compile_options,
    SUN_language = DW_AT_SUN_language,
    SUN_browser_file = DW_AT_SUN_browser_file,
    SUN_vtable_abi = DW_AT_SUN_vtable_abi,
    SUN_func_offsets = DW_AT_SUN_func_offsets,
    SUN_cf_kind = DW_AT_SUN_cf_kind,
    SUN_vtable_index = DW_AT_SUN_vtable_index,
    SUN_omp_tpriv_addr = DW_AT_SUN_omp_tpriv_addr,
    SUN_omp_child_func = DW_AT_SUN_omp_child_func,
    SUN_func_offset = DW_AT_SUN_func_offset,
    SUN_memop_type_ref = DW_AT_SUN_memop_type_ref,
    SUN_profile_id = DW_AT_SUN_profile_id,
    SUN_memop_signature = DW_AT_SUN_memop_signature,
    SUN_obj_dir = DW_AT_SUN_obj_dir,
    SUN_obj_file = DW_AT_SUN_obj_file,
    SUN_original_name = DW_AT_SUN_original_name,
    SUN_hwcprof_signature = DW_AT_SUN_hwcprof_signature,
    SUN_amd64_parmdump = DW_AT_SUN_amd64_parmdump,
    SUN_part_link_name = DW_AT_SUN_part_link_name,
    SUN_link_name = DW_AT_SUN_link_name,
    SUN_pass_with_const = DW_AT_SUN_pass_with_const,
    SUN_return_with_const = DW_AT_SUN_return_with_const,
    SUN_import_by_name = DW_AT_SUN_import_by_name,
    SUN_f90_pointer = DW_AT_SUN_f90_pointer,
    SUN_pass_by_ref = DW_AT_SUN_pass_by_ref,
    SUN_f90_allocatable = DW_AT_SUN_f90_allocatable,
    SUN_f90_assumed_shape_array = DW_AT_SUN_f90_assumed_shape_array,
    SUN_c_vla = DW_AT_SUN_c_vla,
    SUN_return_value_ptr = DW_AT_SUN_return_value_ptr,
    SUN_dtor_start = DW_AT_SUN_dtor_start,
    SUN_dtor_length = DW_AT_SUN_dtor_length,
    SUN_dtor_state_initial = DW_AT_SUN_dtor_state_initial,
    SUN_dtor_state_final = DW_AT_SUN_dtor_state_final,
    SUN_dtor_state_deltas = DW_AT_SUN_dtor_state_deltas,
    SUN_import_by_lname = DW_AT_SUN_import_by_lname,
    SUN_f90_use_only = DW_AT_SUN_f90_use_only,
    SUN_namelist_spec = DW_AT_SUN_namelist_spec,
    SUN_is_omp_child_func = DW_AT_SUN_is_omp_child_func,
    SUN_fortran_main_alias = DW_AT_SUN_fortran_main_alias,
    SUN_fortran_based = DW_AT_SUN_fortran_based,
    ALTIUM_loclist = DW_AT_ALTIUM_loclist,
    use_GNAT_descriptive_type = DW_AT_use_GNAT_descriptive_type,
    GNAT_descriptive_type = DW_AT_GNAT_descriptive_type,
    GNU_numerator = DW_AT_GNU_numerator,
    GNU_denominator = DW_AT_GNU_denominator,
    GNU_bias = DW_AT_GNU_bias,
    go_kind = DW_AT_go_kind,
    go_key = DW_AT_go_key,
    go_elem = DW_AT_go_elem,
    go_embedded_field = DW_AT_go_embedded_field,
    go_runtime_type = DW_AT_go_runtime_type,
    upc_threads_scaled = DW_AT_upc_threads_scaled,
    IBM_wsa_addr = DW_AT_IBM_wsa_addr,
    IBM_home_location = DW_AT_IBM_home_location,
    IBM_alt_srcview = DW_AT_IBM_alt_srcview,
    PGI_lbase = DW_AT_PGI_lbase,
    PGI_soffset = DW_AT_PGI_soffset,
    PGI_lstride = DW_AT_PGI_lstride,
    BORLAND_property_read = DW_AT_BORLAND_property_read,
    BORLAND_property_write = DW_AT_BORLAND_property_write,
    BORLAND_property_implements = DW_AT_BORLAND_property_implements,
    BORLAND_property_index = DW_AT_BORLAND_property_index,
    BORLAND_property_default = DW_AT_BORLAND_property_default,
    BORLAND_Delphi_unit = DW_AT_BORLAND_Delphi_unit,
    BORLAND_Delphi_class = DW_AT_BORLAND_Delphi_class,
    BORLAND_Delphi_record = DW_AT_BORLAND_Delphi_record,
    BORLAND_Delphi_metaclass = DW_AT_BORLAND_Delphi_metaclass,
    BORLAND_Delphi_constructor = DW_AT_BORLAND_Delphi_constructor,
    BORLAND_Delphi_destructor = DW_AT_BORLAND_Delphi_destructor,
    BORLAND_Delphi_anonymous_method = DW_AT_BORLAND_Delphi_anonymous_method,
    BORLAND_Delphi_interface = DW_AT_BORLAND_Delphi_interface,
    BORLAND_Delphi_ABI = DW_AT_BORLAND_Delphi_ABI,
    BORLAND_Delphi_frameptr = DW_AT_BORLAND_Delphi_frameptr,
    BORLAND_closure = DW_AT_BORLAND_closure,
    LLVM_include_path = DW_AT_LLVM_include_path,
    LLVM_config_macros = DW_AT_LLVM_config_macros,
    LLVM_sysroot = DW_AT_LLVM_sysroot,
    LLVM_tag_offset = DW_AT_LLVM_tag_offset,
    LLVM_apinotes = DW_AT_LLVM_apinotes,
    LLVM_active_lane = DW_AT_LLVM_active_lane,
    LLVM_augmentation = DW_AT_LLVM_augmentation,
    LLVM_lanes = DW_AT_LLVM_lanes,
    LLVM_lane_pc = DW_AT_LLVM_lane_pc,
    LLVM_vector_size = DW_AT_LLVM_vector_size,
    APPLE_optimized = DW_AT_APPLE_optimized,
    APPLE_flags = DW_AT_APPLE_flags,
    APPLE_isa = DW_AT_APPLE_isa,
    APPLE_block = DW_AT_APPLE_block,
    APPLE_major_runtime_vers = DW_AT_APPLE_major_runtime_vers,
    APPLE_runtime_class = DW_AT_APPLE_runtime_class,
    APPLE_omit_frame_ptr = DW_AT_APPLE_omit_frame_ptr,
    APPLE_property_name = DW_AT_APPLE_property_name,
    APPLE_property_getter = DW_AT_APPLE_property_getter,
    APPLE_property_setter = DW_AT_APPLE_property_setter,
    APPLE_property_attribute = DW_AT_APPLE_property_attribute,
    APPLE_objc_complete_type = DW_AT_APPLE_objc_complete_type,
    APPLE_property = DW_AT_APPLE_property,
    APPLE_objc_direct = DW_AT_APPLE_objc_direct,
    APPLE_sdk = DW_AT_APPLE_sdk,
    APPLE_origin = DW_AT_APPLE_origin,
    hi_user = DW_AT_hi_user,
};

inline std::ostream &operator<<(std::ostream &os, attribute_t at)
{
    const char *name = nullptr;
    int res = dwarf_get_AT_name(static_cast<Dwarf_Half>(at), &name);
    if (res != DW_DLV_OK) {
        os << "<bogus attrnum>";
    }
    else {
        os << name;
    }
    return os;
}
} // namespace cppdwarf
